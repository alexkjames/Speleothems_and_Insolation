Traceback (most recent call last):
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/alexjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Plotting the data

plot_order = [
    "Kesang.China.2012",
    "Linzhu.China.2009",
    "Bittoo.India.2016",
    "Dongge.China.2004",
    "Sanbao.China.2016",
    "CuevadelDiamante.Peru.2013",
    "Botuvera.Brazil.2005",
    "Leviathan.Nevada.2017",
    "DevilsHole.Nevada.2017",
    "BuckeyeCreek.WestVirginia.2019",
    "Peqiin.Israel.2003",
    "JerusalemWest.Jerusalem.1999",
    "Soreq.Israel.2003",
    "Clearwater.Borneo.2016",
]

fig = plt.figure(figsize=(16, 22))
gs = fig.add_gridspec(7, 2)

for idx, label in enumerate(plot_order):
    ts = plotting_series_dict[label]
    if idx <= 6:
        gs_slot = gs[idx, 0]
    else:
        gs_slot = gs[idx - 7, 1]

    ts.value_name = r"$\delta^{18}O$"
    ts.value_unit = "â€°"
    ax = fig.add_subplot(gs_slot)
    ts.plot(ax=ax, color=cmap_grouped[ts.label])
    ax.legend(
        handles=[
            plt.Line2D(
                [0],
                [0],
                marker=marker_dict[label],
                color=cmap_grouped[label],
                label=label,
                markersize=10,
                linestyle="None",
            )
        ]
    ).set_visible(True)
    ax.invert_xaxis()
    if idx in [6, 13]:
        pass
    else:
        ax.set_xlabel("")
    if idx in [0, 1, 2, 3, 4, 5, 6]:
        pass
    else:
        ax.set_ylabel("")
------------------


[31m---------------------------------------------------------------------------[39m
[31mKeyError[39m                                  Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 24[39m
[32m     21[39m gs = fig.add_gridspec([32m7[39m, [32m2[39m)
[32m     23[39m [38;5;28;01mfor[39;00m idx, label [38;5;129;01min[39;00m [38;5;28menumerate[39m(plot_order):
[32m---> [39m[32m24[39m     ts = [43mplotting_series_dict[49m[43m[[49m[43mlabel[49m[43m][49m
[32m     25[39m     [38;5;28;01mif[39;00m idx <= [32m6[39m:
[32m     26[39m         gs_slot = gs[idx, [32m0[39m]

[31mKeyError[39m: 'Sanbao.China.2016'

