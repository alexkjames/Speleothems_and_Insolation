Traceback (most recent call last):
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/akjames/miniconda3/envs/inso_env/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Creating interglacial/glacial series objects

glacial_coh_dict = {}
interglacial_coh_dict = {}
surrogate_coh = {series.label: [] for series in ms.series_list}

for series in tqdm(ms.series_list):
    # create glacial and interglacial series
    series = series.convert_time_unit("Kyr BP")
    value = []
    time = []
    for interval in interglacial_timing:
        series_interval = series.slice(interval)
        if len(series_interval.time) > 1:
            value.extend(series_interval.value)
            time.extend(series_interval.time)
    interglacial_series = series.copy()
    interglacial_series.time = time
    interglacial_series.value = value

    interglacial_coh_dict[series.label] = interglacial_series.global_coherence(
        inso_series
    )

    value = []
    time = []
    for interval in glacial_timing:
        series_interval = series.slice(interval)
        if len(series_interval.time) > 1:
            value.extend(series_interval.value)
            time.extend(series_interval.time)
    glacial_series = series.copy()
    glacial_series.time = time
    glacial_series.value = value

    glacial_coh_dict[series.label] = glacial_series.global_coherence(inso_series)

    num_sim = 1000

    for i in range(num_sim):
        surrogate_timing = []
        end_time = np.random.randint(0, 50)
        max_age = int(max(series.time))
        while end_time < max_age:
            start_time = end_time
            end_time += np.random.randint(30, 60)
            surrogate_timing.append([start_time, end_time])
            end_time += np.random.randint(30, 60)

        value = []
        time = []
        for interval in surrogate_timing:
            series_interval = series.slice(interval)
            if len(series_interval.time) > 1:
                value.extend(series_interval.value)
                time.extend(series_interval.time)
        surrogate_series = series.copy()
        surrogate_series.time = time
        surrogate_series.value = value

        coh = surrogate_series.global_coherence(inso_series)
        surrogate_coh[series.label].append(gcoh_band_power(coh, 10, 30))
------------------

----- stderr -----
  0%|                                                                                                                                    | 0/3 [00:00<?, ?it/s]
----- stderr -----
  0%|                                                                                                                                    | 0/3 [00:13<?, ?it/s]
----- stderr -----

------------------

[31m---------------------------------------------------------------------------[39m
[31mKeyboardInterrupt[39m                         Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[8][39m[32m, line 61[39m
[32m     58[39m surrogate_series.time = time
[32m     59[39m surrogate_series.value = value
[32m---> [39m[32m61[39m coh = [43msurrogate_series[49m[43m.[49m[43mglobal_coherence[49m[43m([49m[43minso_series[49m[43m)[49m
[32m     62[39m surrogate_coh[series.label].append(gcoh_band_power(coh, [32m10[39m, [32m30[39m))

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/pyleoclim/core/series.py:3838[39m, in [36mSeries.global_coherence[39m[34m(self, target_series, coh, method, wavelet_kwargs)[39m
[32m   3836[39m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([33m"[39m[33mIf target_series is None, coh must be provided.[39m[33m"[39m)
[32m   3837[39m     [38;5;28;01melse[39;00m:
[32m-> [39m[32m3838[39m         coh = [38;5;28;43mself[39;49m[43m.[49m[43mwavelet_coherence[49m[43m([49m[43mtarget_series[49m[43m,[49m[43m*[49m[43m*[49m[43mwavelet_kwargs[49m[43m)[49m
[32m   3839[39m [38;5;28;01melse[39;00m:
[32m   3840[39m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(coh,Coherence):

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/pyleoclim/core/series.py:3766[39m, in [36mSeries.wavelet_coherence[39m[34m(self, target_series, method, settings, freq, freq_kwargs, verbose, common_time_kwargs)[39m
[32m   3763[39m args[method].update(settings)
[32m   3765[39m [38;5;66;03m# Apply WTC method[39;00m
[32m-> [39m[32m3766[39m wtc_res = [43mwtc_func[49m[43m[[49m[43mmethod[49m[43m][49m[43m([49m[43mts1[49m[43m.[49m[43mvalue[49m[43m,[49m[43m [49m[43mts1[49m[43m.[49m[43mtime[49m[43m,[49m[43m [49m[43mts2[49m[43m.[49m[43mvalue[49m[43m,[49m[43m [49m[43mts2[49m[43m.[49m[43mtime[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43margs[49m[43m[[49m[43mmethod[49m[43m][49m[43m)[49m
[32m   3768[39m [38;5;66;03m# Export result[39;00m
[32m   3769[39m coh = Coherence(
[32m   3770[39m     frequency=wtc_res.freq,
[32m   3771[39m     scale = wtc_res.scale,
[32m   (...)[39m[32m   3782[39m     freq_kwargs=freq_kwargs,
[32m   3783[39m )

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/pyleoclim/utils/wavelet.py:2714[39m, in [36mcwt_coherence[39m[34m(y1, t1, y2, t2, freq, freq_method, freq_kwargs, scale, detrend, sg_kwargs, pad, standardize, gaussianize, tau, Neff_threshold, mother, param, smooth_factor)[39m
[32m   2711[39m     freq = freq[[32m1[39m:] [38;5;66;03m# delete 0 frequency if present[39;00m
[32m   2713[39m [38;5;66;03m#  Compute CWT for both series       [39;00m
[32m-> [39m[32m2714[39m cwt1 = [43mcwt[49m[43m([49m[43my1[49m[43m,[49m[43mt1[49m[43m,[49m[43mfreq[49m[43m=[49m[43mfreq[49m[43m,[49m[43mfreq_method[49m[43m=[49m[43mfreq_method[49m[43m,[49m[43mfreq_kwargs[49m[43m=[49m[43mfreq_kwargs[49m[43m,[49m
[32m   2715[39m [43m           [49m[43mscale[49m[43m [49m[43m=[49m[43m [49m[43mscale[49m[43m,[49m[43m [49m[43mdetrend[49m[43m=[49m[43mdetrend[49m[43m,[49m[43m [49m[43msg_kwargs[49m[43m=[49m[43msg_kwargs[49m[43m,[49m
[32m   2716[39m [43m           [49m[43mgaussianize[49m[43m=[49m[43mgaussianize[49m[43m,[49m[43m [49m[43mstandardize[49m[43m=[49m[43mstandardize[49m[43m,[49m[43m [49m[43mpad[49m[43m=[49m[43mpad[49m[43m,[49m
[32m   2717[39m [43m           [49m[43mmother[49m[43m=[49m[43mmother[49m[43m,[49m[43mparam[49m[43m=[49m[43mparam[49m[43m)[49m
[32m   2719[39m cwt2 = cwt(y2,t2,freq=freq,freq_method=freq_method,freq_kwargs=freq_kwargs,
[32m   2720[39m            scale = scale, detrend=detrend, sg_kwargs=sg_kwargs,
[32m   2721[39m            gaussianize=gaussianize, standardize=standardize, pad=pad,
[32m   2722[39m            mother=mother,param=param)
[32m   2724[39m wt_coeff1 = cwt1.coeff.T [38;5;66;03m# transpose so that scale is second axis, as for wwz[39;00m

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/pyleoclim/utils/wavelet.py:2571[39m, in [36mcwt[39m[34m(ys, ts, freq, freq_method, freq_kwargs, scale, detrend, sg_kwargs, gaussianize, standardize, pad, mother, param)[39m
[32m   2568[39m     scale = [32m1.[39m / (fourier_factor * freq)
[32m   2570[39m [38;5;66;03m#calculate wavelet[39;00m
[32m-> [39m[32m2571[39m wave, coi = [43mtc_wavelet[49m[43m([49m[43mys[49m[43m,[49m[43m [49m[43mdt[49m[43m,[49m[43m [49m[43mscale[49m[43m,[49m[43m [49m[43mmother[49m[43m,[49m[43m [49m[43mparam[49m[43m,[49m[43m [49m[43mpad[49m[43m)[49m
[32m   2572[39m amplitude=np.abs(wave)
[32m   2574[39m Results = collections.namedtuple([33m'[39m[33mResults[39m[33m'[39m, [[33m'[39m[33mamplitude[39m[33m'[39m, [33m'[39m[33mcoi[39m[33m'[39m, [33m'[39m[33mfreq[39m[33m'[39m, [33m'[39m[33mtime[39m[33m'[39m, [33m'[39m[33mscale[39m[33m'[39m, [33m'[39m[33mcoeff[39m[33m'[39m, [33m'[39m[33mmother[39m[33m'[39m,[33m'[39m[33mparam[39m[33m'[39m,[33m'[39m[33mgaussianize[39m[33m'[39m,[33m'[39m[33mstandardize[39m[33m'[39m])

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/pyleoclim/utils/wavelet.py:2831[39m, in [36mtc_wavelet[39m[34m(Y, dt, scale, mother, param, pad)[39m
[32m   2828[39m [38;5;28;01mfor[39;00m a1 [38;5;129;01min[39;00m [38;5;28mrange[39m([32m0[39m, [38;5;28mlen[39m(scale)):
[32m   2829[39m     daughter, fourier_factor, coi, _ = \
[32m   2830[39m         tc_wave_bases(mother, k, scale[a1], param)
[32m-> [39m[32m2831[39m     wave[a1, :] = [43mnp[49m[43m.[49m[43mfft[49m[43m.[49m[43mifft[49m[43m([49m[43mf[49m[43m [49m[43m*[49m[43m [49m[43mdaughter[49m[43m)[49m  [38;5;66;03m# wavelet transform[Eqn(4)][39;00m
[32m   2833[39m [38;5;66;03m# COI [Sec.3g][39;00m
[32m   2834[39m coi = coi * dt * np.concatenate((
[32m   2835[39m     np.insert(np.arange([38;5;28mint[39m((n1 + [32m1[39m) / [32m2[39m) - [32m1[39m), [[32m0[39m], [[32m1E-5[39m]),
[32m   2836[39m     np.insert(np.flipud(np.arange([32m0[39m, [38;5;28mint[39m(n1 / [32m2[39m) - [32m1[39m)), [-[32m1[39m], [[32m1E-5[39m])))

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/numpy/fft/_pocketfft.py:316[39m, in [36mifft[39m[34m(a, n, axis, norm)[39m
[32m    314[39m     n = a.shape[axis]
[32m    315[39m inv_norm = _get_backward_norm(n, norm)
[32m--> [39m[32m316[39m output = [43m_raw_fft[49m[43m([49m[43ma[49m[43m,[49m[43m [49m[43mn[49m[43m,[49m[43m [49m[43maxis[49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m[43m [49m[43minv_norm[49m[43m)[49m
[32m    317[39m [38;5;28;01mreturn[39;00m output

[36mFile [39m[32m~/miniconda3/envs/inso_env/lib/python3.11/site-packages/numpy/fft/_pocketfft.py:70[39m, in [36m_raw_fft[39m[34m(a, n, axis, is_real, is_forward, inv_norm)[39m
[32m     67[39m         a = z
[32m     69[39m [38;5;28;01mif[39;00m axis == a.ndim-[32m1[39m:
[32m---> [39m[32m70[39m     r = [43mpfi[49m[43m.[49m[43mexecute[49m[43m([49m[43ma[49m[43m,[49m[43m [49m[43mis_real[49m[43m,[49m[43m [49m[43mis_forward[49m[43m,[49m[43m [49m[43mfct[49m[43m)[49m
[32m     71[39m [38;5;28;01melse[39;00m:
[32m     72[39m     a = swapaxes(a, axis, -[32m1[39m)

[31mKeyboardInterrupt[39m: 

